@page "/"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Scrumboard.Models
@using Scrumboard.Services
@inject HttpClient Http
@inject BoardApiService apiService
@inject IDialogService DialogService;

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
	<TitleContent>
		<MudText Typo="Typo.h6">
			<MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" /> Delete Task
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudAlert>Are you sure you want to delete this task?</MudAlert>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete" Class="px-10">DELETE</MudButton>
	</DialogActions>
</MudDialog>
<MudDropContainer T="BoardTask" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.state.Name == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="250px" MinHeight="400px" Class="pa-4 ma-2 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="BoardTask" Identifier="@item.Name" Class="mud-height-full" />
				@if (@item.AcceptsTaskCreate)
				{
					<MudButton OnClick="@(() => OpenCreateTaskDialog(item))" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newStateModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newStateModel.Name" For="@(() => newStateModel.Name)" Placeholder="New Section" DisableUnderLine="true" Label="State Name"></MudTextField>
						<MudTextField @bind-Value="newStateModel.StatePriority" For="@(() => newStateModel.StatePriority)" Placeholder="Priority level" DisableUnderLine="true" Label="Priority"></MudTextField>
						<MudSwitch @bind-Checked="@newStateModel.AcceptsTaskCreate" Label="Allow Task Create" Color="Color.Primary" />
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudCard Elevation="25" Class="pa-4 rounded-lg my-3">
			<MudCardContent>
                <MudText>@context.name</MudText>
                <MudText Typo="Typo.body2">@context.description</MudText>
				@switch (@context.priority)
				{
					case Priority.Urgent:
						<MudChip Color="Color.Error">@context.priority.ToString()</MudChip>
						break;
					case Priority.Highest:
						<MudChip Color="Color.Warning">@context.priority.ToString()</MudChip>
						break;
					case Priority.Medium:
						<MudChip Color="Color.Default">@context.priority.ToString()</MudChip>
						break;
				}
			</MudCardContent>
			<MudCardActions>
                <MudButton DisableRipple="true" Variant="Variant.Text" @onclick="@((e) => OpenEditDialog(context))" Color="Color.Primary">Edit</MudButton>
                <MudFab DisableRipple="true" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteDialog(context)" />
            </MudCardActions>
		</MudCard>
	</ItemRenderer>
</MudDropContainer>
@code {
	private MudDropContainer<BoardTask>? _dropContainer;

	private bool _addSectionOpen;
	private string _Data;

	private List<User> _users = new();

	private async Task OpenEditDialog(BoardTask task)
	{
		var parameters = new DialogParameters { ["task"] = task, ["users"] = _users, ["states"] = _sections};
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<EditTask>(task.name, parameters, options);
		var result = await dialog.Result;
		if (result.Cancelled)
			return;
		var returnedTask = (BoardTask)result.Data;
		_tasks.Remove(task);
		_tasks.Add(returnedTask);
		_dropContainer?.Refresh();
	}

	private async Task OpenCreateTaskDialog(State state)
	{
		var parameters = new DialogParameters { ["users"] = _users, ["states"] = _sections, ["selectedState"] = state };
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<CreateTask>("New Task", parameters, options);
		var result = await dialog.Result;
		if (result.Cancelled)
			return;
		var returnedTask = (BoardTask)result.Data;
		_tasks.Add(returnedTask);
		_dropContainer?.Refresh();
	}

	protected override async Task OnInitializedAsync()
	{
		var data = await apiService.GetSections();
		var tasks = await apiService.GetTasks();
		var users = await apiService.GetUsers();
		_users.AddRange(users);
		_tasks.AddRange(tasks);
		_sections.AddRange(data);
	}

	/* handling board events */
	private async Task TaskUpdated(MudItemDropInfo<BoardTask> info)
	{
		info.Item.StateID = _sections.FirstOrDefault(e => e.Name == info.DropzoneIdentifier).Id;
		info.Item.state.Name = info.DropzoneIdentifier;
		await apiService.UpdateTask(info.Item);
	}

	public async Task UpdateTask(BoardTask task)
	{
		await apiService.UpdateTask(task);
	}

	/* Setup for board  */
	private List<State> _sections = new()
	{
	};

	private List<BoardTask> _tasks = new()
	{
	};

	State newStateModel = new State();

	private async Task OnValidSectionSubmit(EditContext context)
	{
		var stateResult = await apiService.CreateState(newStateModel);
		_sections.Add(stateResult);
		_sections = _sections.OrderByDescending(e => e.StatePriority).ToList();
		newStateModel = new State();
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

    private void DeleteSection(State section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.state.Name == section.Name);
			foreach (var item in tasks)
			{
				item.state.Name = _sections[newIndex].Name;
			}
		}
	}

	private async void Delete()
	{
		visible = false;
		await apiService.DeleteTask(taskDelete);
		_tasks.Remove(taskDelete);
		_dropContainer.Refresh();
	}

	private BoardTask taskDelete;
	private bool visible = false;
	private void DeleteDialog(BoardTask task)
	{
		taskDelete = task;
		visible = true;
	}
	private DialogOptions dialogOptions = new() { FullWidth = true };
}
