@page "/"

@using Microsoft.AspNetCore.Components
@using Scrumboard.Models
@using Scrumboard.Services
@using Blazored.LocalStorage
@inject BoardApiService apiService
@inject IDialogService DialogService;

<MudDialog @bind-IsVisible="deleteDialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" /> Delete Task
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudAlert>Are you sure you want to delete this task?</MudAlert>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete" Class="px-10">DELETE</MudButton>
    </DialogActions>
</MudDialog>
<MudDropContainer T="BoardTask" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.state.Name == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="250px" MinHeight="400px" Class="pa-4 ma-2 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                </MudToolBar>
				<MudDropZone T="BoardTask" Identifier="@item.Name" Class="mud-height-full" />
				@if (@item.AcceptsTaskCreate)
				{
					<MudButton OnClick="@(() => OpenCreateTaskDialog(item))" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newStateModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newStateModel.Name" For="@(() => newStateModel.Name)" Placeholder="New Section" DisableUnderLine="true" Label="State Name"></MudTextField>
						<MudTextField @bind-Value="newStateModel.StatePriority" For="@(() => newStateModel.StatePriority)" Placeholder="Priority level" DisableUnderLine="true" Label="Priority"></MudTextField>
						<MudSwitch @bind-Checked="@newStateModel.AcceptsTaskCreate" Label="Allow Task Create" Color="Color.Primary" />
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudCard Elevation="25" Class="pa-4 rounded-lg my-3">
			<MudCardContent>
                <MudText>@context.name</MudText>
                <MudText Typo="Typo.body2">@context.description</MudText>
				@switch (@context.priority)
				{
					case Priority.Urgent:
						<MudChip Color="Color.Error">@context.priority.ToString()</MudChip>
						break;
					case Priority.Highest:
						<MudChip Color="Color.Warning">@context.priority.ToString()</MudChip>
						break;
					case Priority.Medium:
						<MudChip Color="Color.Default">@context.priority.ToString()</MudChip>
						break;
				}
			</MudCardContent>
			<MudCardActions>
                <MudButton DisableRipple="true" Variant="Variant.Text" @onclick="@((e) => OpenEditDialog(context))" Color="Color.Primary">Edit</MudButton>
                <MudFab DisableRipple="true" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteDialog(context)" />
            </MudCardActions>
		</MudCard>
	</ItemRenderer>
</MudDropContainer>
@code {
	//Drop container which can contain BoardTask objects in dropzones.
	private MudDropContainer<BoardTask>? _dropContainer;
	//List of users fetched populated from Api call on initialization.
	private List<User> _users = new();
	//List of states(sections) fetched from Api call, and populated by section creation through UI
	private List<State> _sections = new();
	//List of tasks fetched from api call, and populated by task creation through UI
	private List<BoardTask> _tasks = new();

	//Boolean to control the visibily of section creation window.
	private bool _addSectionOpen;
	//property to hold state object to be created before api call.
	State newStateModel = new State();

	//Task to delete is stored here on select.
	private BoardTask taskDelete;
	//boolean to control whether or not the delete dialog window is visible.
	private bool deleteDialogVisible = false;

	private DialogOptions dialogOptions = new() { FullWidth = true };

	/// <summary>
	/// Opens edit dialog and sends selected dialog, and users and states as parameters to the dialog component.
	/// in case of cancel or null it returns, otherwise it removed old task and adds the newly updated task and refreshed drop container.
	/// </summary>
	/// <param name="task">Selected task to edit.</param>
	private async Task OpenEditDialog(BoardTask task)
	{
		var parameters = new DialogParameters { ["task"] = task, ["users"] = _users, ["states"] = _sections};
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<EditTask>(task.name, parameters, options);
		var result = await dialog.Result;
		if (result.Cancelled || result.Data == null)
			return;
		var returnedTask = (BoardTask)result.Data;
		_tasks.Remove(task);
		_tasks.Add(returnedTask);
		_dropContainer?.Refresh();
	}

	/// <summary>
	/// Opens create task dialog sends users and selected state as paramters to the create task dialog component.
	/// In case of cancel or null it returns, otherwise it takes the task from dialog return data, and adds it to the task list and refreshed container.
	/// </summary>
	/// <param name="state">State for task to be created in.</param>
	private async Task OpenCreateTaskDialog(State state)
	{
		var parameters = new DialogParameters { ["users"] = _users, ["selectedState"] = state };
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<CreateTask>("New Task", parameters, options);
		var result = await dialog.Result;
		if (result.Cancelled || result.Data == null)
			return;
		var returnedTask = (BoardTask)result.Data;
		_tasks.Add(returnedTask);
		_dropContainer?.Refresh();
	}

	/// <summary>
	/// Sets States, tasks and users lists after receiving the data from backend.
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		var states = await apiService.GetSections();
		var tasks = await apiService.GetTasks();
		var users = await apiService.GetUsers();
		SetStates(states);
		SetUsers(users);
		SetTasks(tasks);
	}

	/// <summary>
	/// Checks if data is null or empty, and adds to _sections if it's not
	/// </summary>
	/// <param name="states">States to add.</param>
	private void SetStates(List<State> states)
	{
		if (states != null && states.Any())
		{
			_sections.AddRange(states);
		}
	}

	/// <summary>
	/// Checks if data is null or empty, and adds to users if it's not
	/// </summary>
	/// <param name="users">users to add.</param>
	private void SetUsers(List<User> users)
	{
		if (users != null && users.Any())
		{
			_users.AddRange(users);
		}
	}

	/// <summary>
	/// Checks if data is null or empty, and adds to tasks if it's not
	/// </summary>
	/// <param name="tasks">Tasks to add.</param>
	private void SetTasks(List<BoardTask> tasks)
	{
		if (tasks != null && tasks.Any())
		{
			_tasks.AddRange(tasks);
		}
	}

	/// <summary>
	/// Called when a task is dropped into a dropzone, uses dropzone identifier to find the specific state in the _sections list.
	/// And maps the task which was dropped state ID to the state is was dropped in.
	/// </summary>
	/// <param name="info">Drop info provide when item is dropped in a dropzone.</param>
	private async Task TaskUpdated(MudItemDropInfo<BoardTask> info)
	{
		info.Item.StateID = _sections.FirstOrDefault(e => e.Name == info.DropzoneIdentifier).Id;
		info.Item.state.Name = info.DropzoneIdentifier;
		await apiService.UpdateTask(info.Item);
	}

	/// <summary>
	/// Calls service to update provided task
	/// </summary>
	/// <param name="task">Task to update.</param>
	/// <returns></returns>
	public async Task UpdateTask(BoardTask task)
	{
		await apiService.UpdateTask(task);
	}


	/// <summary>
	/// Called when a section is submitted, calls service to save new state to backend
	/// when saved then orders list based on priority set on each State object.
	/// </summary>
	private async Task OnValidSectionSubmit()
	{
		var stateResult = await apiService.CreateState(newStateModel);
		_sections.Add(stateResult);
		_sections = _sections.OrderByDescending(e => e.StatePriority).ToList();
		newStateModel = new State();
		_addSectionOpen = false;
	}

	/// <summary>
	/// Called when button press to show new section creation content.
	/// </summary>
	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	/// <summary>
	/// Called by dialog when pressed to delete selected task from backend, and refreshed dropcontainer.
	/// </summary>
	private async void Delete()
	{
		deleteDialogVisible = false;
		await apiService.DeleteTask(taskDelete);
		_tasks.Remove(taskDelete);
		_dropContainer.Refresh();
	}

	/// <summary>
	/// Called when delete icon is pressed, and saves task which icon was pressed on to later be used to delete seleced task.
	/// Sets visibility boolean to true to view dialog.
	/// </summary>
	/// <param name="task"></param>
	private void DeleteDialog(BoardTask task)
	{
		taskDelete = task;
		deleteDialogVisible = true;
	}
}
